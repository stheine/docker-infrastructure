user                 nginx;

error_log            /dev/stderr info;
pid                  /var/run/nginx.pid;

worker_processes     auto;
worker_rlimit_nofile 20960;

events {
  worker_connections 1024;
  multi_accept       on;
  use                epoll;
  epoll_events       512;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format    main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log    /dev/stdout  main;

  sendfile        on;
  #tcp_nopush     on;

  client_max_body_size 100M;

  gzip              on;
  gzip_comp_level   3;
  gzip_min_length   1000;
  gzip_types        text/xml text/css;
  gzip_http_version 1.1;
  gzip_vary         on;

  keepalive_timeout  30s;
  keepalive_requests 30;
  send_timeout       30s;

  open_file_cache          max=1000 inactive=30s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 4;
  open_file_cache_errors   on;

  server_tokens            off;

  # HTTP server, just to redirect to https
  server {
    server_name *.heine7.de;
    listen 80;

    location / {
      # Rewrite all nonssl requests to ssl.
      return 301 https://$host$request_uri;
    }

    # Static route
    location /check-access {
      add_header Content-Type text/plain;

      return 200 'You have access (http)';
    }

    # Let's Encrypt specific path to handle the certificate renewal
    location ^~ /.well-known/ {
      default_type "text/plain";
      allow        all;
      root         /var/letsencrypt/;
    }

    location = /.well-known/ {
      return 404;
    }

    location = /.well-known/acme-challenge/ {
      return 404;
    }
  }

  # SSL configuration
  ssl_certificate           /etc/letsencrypt/live/heine7.de/fullchain.pem;
  ssl_certificate_key       /etc/letsencrypt/live/heine7.de/privkey.pem;
  ssl_trusted_certificate   /etc/letsencrypt/live/heine7.de/chain.pem;
  ssl_protocols             TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  add_header                Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

  # Other config
  proxy_set_header          X-Real-IP  $remote_addr;
  proxy_set_header          X-Forwarded-For $remote_addr;
  proxy_set_header          Host $host;

  # HTTPS servers
  server {
    server_name             heine7.de;
    listen                  443 ssl;
    http2                   on;

    # Static route
    location /check-access {
      add_header Content-Type text/plain;

      return 200 'You have access (https)';
    }

    location / {
      proxy_pass http://apache2:80;
    }
  }

  # Vaultwarden config
  upstream vaultwarden-default {
    zone vaultwarden-default 64k;
    server vaultwarden:80;
    keepalive 2;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  server {
    server_name             bitwarden.heine7.de;
    listen                  443 ssl;
    http2                   on;

    client_max_body_size    525M;

    location / {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_pass http://vaultwarden-default;
    }
  }

server {
    server_name cloud.heine7.de;

#    listen 80;
#    listen [::]:80;            # comment to disable IPv6
#
#    if ($scheme = "http") {
#        return 301 https://$host$request_uri;
#    }

    listen 443 ssl;      # for nginx v1.25.1+
#    listen [::]:443 ssl; # for nginx v1.25.1+ - keep comment to disable IPv6

    http2 on;                                 # uncomment to enable HTTP/2        - supported on nginx v1.25.1+
    http3 on;                                 # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+
    quic_retry on;                            # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+
    add_header Alt-Svc 'h3=":443"; ma=86400'; # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+
    # listen 443 quic reuseport;       # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+ - please remove "reuseport" if there is already another quic listener on port 443 with enabled reuseport
    # listen [::]:443 quic reuseport;  # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+ - please remove "reuseport" if there is already another quic listener on port 443 with enabled reuseport - keep comment to disable IPv6

    location / {
#        proxy_pass http://nextcloud-aio-mastercontainer:11000$request_uri;
#        proxy_pass http://nextcloud-aio-mastercontainer:11000;
#        proxy_pass http://127.0.0.1:11000$request_uri;
        proxy_pass http://192.168.6.5:11000$request_uri;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Accept-Encoding "";
        proxy_set_header Host $host;

        client_body_buffer_size 512k;
        proxy_read_timeout 86400s;
        client_max_body_size 0;

        # Websocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

#    # If running nginx on a subdomain (eg. nextcloud.example.com) of a domain that already has an wildcard ssl certificate from certbot on this machine,
#    # the <your-nc-domain> in the below lines should be replaced with just the domain (eg. example.com), not the subdomain.
#    # In this case the subdomain should already be secured without additional actions
#    ssl_certificate /etc/letsencrypt/live/<your-nc-domain>/fullchain.pem;   # managed by certbot on host machine
#    ssl_certificate_key /etc/letsencrypt/live/<your-nc-domain>/privkey.pem; # managed by certbot on host machine

#    ssl_session_timeout 1d;
#    ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
#    ssl_session_tickets off;
#
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
#    ssl_prefer_server_ciphers on;

    # Optional settings:

    # OCSP stapling
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /etc/letsencrypt/live/<your-nc-domain>/chain.pem;

    # replace with the IP address of your resolver
    # resolver 127.0.0.1; # needed for oscp stapling: e.g. use 94.140.15.15 for adguard / 1.1.1.1 for cloudflared or 8.8.8.8 for google - you can use the same nameserver as listed in your /etc/resolv.conf file
}

#  server {
#    server_name             cloud.heine7.de;
#    listen                  443 ssl;
#    http2                   on;
#
##    set $dest $http_destination;
##    if ($http_destination ~ ^https://(?<dest_uri>(.+))) {
##       set $dest http://$dest_uri;
##    }
##    proxy_set_header Destination $dest;
#
#    location / {
#      proxy_pass http://nextcloud:80/;
#    }
#
#    location /.well-known/carddav {
#      return 301 https://cloud.heine7.de/remote.php/dav;
#    }
#
#    location /.well-known/caldav {
#      return 301 https://cloud.heine7.de/remote.php/dav;
#    }
#  }

  server {
    server_name             homer.heine7.de;
    listen                  443 ssl;
    http2                   on;

    location / {
      proxy_pass http://homer:8080;
    }
  }

  server {
    server_name             ladder.heine7.de;
    listen                  443 ssl;
    http2                   on;

    location / {
      proxy_pass http://ladder:5233;
    }
  }

  server {
    server_name             wiki.heine7.de;
    listen                  443 ssl;
    http2                   on;

    location / {
      proxy_pass http://mediawiki:80;
    }
  }
}
