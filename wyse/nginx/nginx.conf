user                 nginx;

error_log            /dev/stderr info;
pid                  /var/run/nginx.pid;

worker_processes     auto;
worker_rlimit_nofile 20960;

events {
  worker_connections 1024;
  multi_accept       on;
  use                epoll;
  epoll_events       512;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format    main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log    /dev/stdout  main;

  sendfile        on;
  #tcp_nopush     on;

  client_max_body_size 100M;

  gzip              on;
  gzip_comp_level   3;
  gzip_min_length   1000;
  gzip_types        text/xml text/css;
  gzip_http_version 1.1;
  gzip_vary         on;

  keepalive_timeout  30s;
  keepalive_requests 30;
  send_timeout       30s;

  open_file_cache          max=1000 inactive=30s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 4;
  open_file_cache_errors   on;

  server_tokens            off;

  # HTTP server, just to redirect to https
  server {
    server_name *.heine7.de;
    listen 80;

    location / {
      # Rewrite all nonssl requests to ssl.
      return 301 https://$host$request_uri;
    }

    # Static route
    location /check-access {
      add_header Content-Type text/plain;

      return 200 'You have access (http)';
    }

    # Let's Encrypt specific path to handle the certificate renewal
    location ^~ /.well-known/ {
      default_type "text/plain";
      allow        all;
      root         /var/letsencrypt/;
    }

    location = /.well-known/ {
      return 404;
    }

    location = /.well-known/acme-challenge/ {
      return 404;
    }
  }

  # SSL configuration
  ssl_certificate           /etc/letsencrypt/live/heine7.de/fullchain.pem;
  ssl_certificate_key       /etc/letsencrypt/live/heine7.de/privkey.pem;
  ssl_trusted_certificate   /etc/letsencrypt/live/heine7.de/chain.pem;
  ssl_protocols             TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  add_header                Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

  # Other config
  proxy_set_header          X-Real-IP  $remote_addr;
  proxy_set_header          X-Forwarded-For $remote_addr;
  proxy_set_header          Host $host;

  # HTTPS servers
  server {
    server_name             heine7.de;
    listen                  443 ssl;
    http2                   on;

    # Static route
    location /check-access {
      add_header Content-Type text/plain;

      return 200 'You have access (https)';
    }

##    location / {
##      proxy_pass http://apache2:80/;
##    }
  }

##  # Vaultwarden config
##  upstream vaultwarden-default {
##    zone vaultwarden-default 64k;
##    server vaultwarden:80;
##    keepalive 2;
##  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      "";
  }

##  server {
##    server_name             bitwarden.heine7.de;
##    listen                  443 ssl;
##    http2                   on;
##
##    client_max_body_size    525M;
##
##    location / {
##      proxy_http_version 1.1;
##      proxy_set_header Upgrade $http_upgrade;
##      proxy_set_header Connection $connection_upgrade;
##
##      proxy_set_header Host $host;
##      proxy_set_header X-Real-IP $remote_addr;
##      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
##      proxy_set_header X-Forwarded-Proto $scheme;
##
##      proxy_pass http://vaultwarden-default;
##    }
##  }

##  server {
##    server_name             homer.heine7.de;
##    listen                  443 ssl;
##    http2                   on;
##
##    location / {
##      proxy_pass http://homer:8080;
##    }
##  }

##  server {
##    server_name             wiki.heine7.de;
##    listen                  443 ssl;
##    http2                   on;
##
##    location / {
##      proxy_pass http://mediawiki:80/;
##    }
##  }
}
